#!/usr/bin/env bash

new_instance() {
  ~/.local/kitty.app/bin/kitty \
    --single-instance \
    --class default \
    --title default \
    --listen-on=unix:/tmp/ktysocket \
    --start-as=maximized \
    -o allow_remote_control=yes \
    -o tab_bar_style=custom \
    -o tab_bar_min_tabs=1 \
    -o tab_title_template="{tab.active_oldest_exe}" \
    -c ~/.config/kitty/ktysess.conf
}

get_win_id_by_wm_class() {
  kitty @ ls | jq -r "
    .[]
    | select(.wm_class == \"$1\")
    | .tabs[]
    | select(.is_active == true)
    | .windows[0].env.KITTY_WINDOW_ID"
}

launch_new_window() {
  local working_dir=""
  local class_name=""

  if [[ "$1" != "" ]]; then
    working_dir="$1"
  else
    working_dir=$(find ~/projects -mindepth 1 -maxdepth 1 -type d | ~/.fzf/bin/fzf)
    [[ -z $working_dir ]] && echo "No project selected." && exit 0
  fi

  if [[ "$2" != "" ]]; then
    class_name="$2"
  else
    class_name=$(basename "$working_dir" | tr . _)
  fi

  # Focus window if kitty wm_class exists
  local win_id=$(get_win_id_by_wm_class "$class_name")
  if [[ -n "$win_id" ]]; then
    kitty @ focus-window --match "id:$win_id"
    return
  fi

  kitty @ launch \
    --type=os-window \
    --os-window-class "$class_name" \
    --os-window-title "$class_name" \
    --os-window-state maximized \
    --cwd "$working_dir" \
    > /dev/null
}

switch_window() {
  local selected=$(kitty @ ls | jq -r '.[].wm_class' | ~/.fzf/bin/fzf)
  [[ -z "$selected" ]] && echo "switch window error: window name not selected." && exit 0

  local win_id=$(get_win_id_by_wm_class "$selected")
  [[ -z "$win_id" ]] && echo "switch window error: window id not found." && exit 0

  kitty @ focus-window --match "id:$win_id"
}

main() {
  local cmd="$1"
  shift

  case "$cmd" in
    switch)
      switch_window
      ;;
    new)
      if pgrep -x kitty > /dev/null; then
        local opt_path=""
        local opt_name=""

        while [[ $# -gt 0 ]]; do
          case "$1" in
            --path)
              shift; opt_path="$1"; shift
              ;;
            --name)
              shift; opt_name="$1"; shift
              ;;
            *)
              echo "Unknown option: $1"; exit 1
              ;;
          esac
        done

        if [[ "$opt_name" != "" ]] && [[ "$opt_path" == "" ]]; then
          echo "Error: --name requires --path"; exit 1
        fi

        launch_new_window "$opt_path" "$opt_name"
      else
        new_instance
      fi
      ;;
    *)
      echo "Usage: $0 {new|switch}"
      ;;
  esac
}

main "$@"
